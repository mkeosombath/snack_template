{"ast":null,"code":"import _classCallCheck from \"/Users/monica/Desktop/template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/monica/Desktop/template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/monica/Desktop/template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/monica/Desktop/template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/monica/Desktop/template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/monica/Desktop/template/src/shared/components/pagination/PaginationSmall.jsx\";\nimport React, { PureComponent } from 'react';\nimport { Pagination, PaginationItem, PaginationLink } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport range from 'lodash.range';\nimport ChevronRightIcon from 'mdi-react/ChevronRightIcon';\nimport ChevronLeftIcon from 'mdi-react/ChevronLeftIcon';\n\nvar PaginationSmallComponent =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(PaginationSmallComponent, _PureComponent);\n\n  function PaginationSmallComponent(props) {\n    var _this;\n\n    _classCallCheck(this, PaginationSmallComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PaginationSmallComponent).call(this, props));\n\n    _this.setPage = function (page) {\n      var _this$props = _this.props,\n          items = _this$props.items,\n          onChangePage = _this$props.onChangePage;\n      var _this$state = _this.state,\n          pager = _this$state.pager,\n          size = _this$state.size;\n\n      if (page < 1 || page > pager.totalPages) {\n        return;\n      } // get new pager object for specified page\n\n\n      _this.pager = _this.getPager(items.length, page, size); // get new page of items from items array\n\n      var pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1); // update state\n\n      _this.setState({\n        pager: _this.pager\n      }); // call change page function in parent component\n\n\n      onChangePage(pageOfItems);\n    };\n\n    _this.getPager = function (totalItems, curPage, pSize) {\n      // default to first page\n      var currentPage = curPage || 1; // default page size is 10\n\n      var pageSize = pSize || 10; // calculate total pages\n\n      var totalPages = Math.ceil(totalItems / pageSize);\n      var startPage;\n      var endPage;\n\n      if (totalPages <= 10) {\n        // less than 10 total pages so show all\n        startPage = 1;\n        endPage = totalPages;\n      } else if (currentPage <= 6) {\n        // more than 10 total pages so calculate start and end pages\n        startPage = 1;\n        endPage = 10;\n      } else if (currentPage + 4 >= totalPages) {\n        startPage = totalPages - 9;\n        endPage = totalPages;\n      } else {\n        startPage = currentPage - 5;\n        endPage = currentPage + 4;\n      } // calculate start and end item indexes\n\n\n      var startIndex = (currentPage - 1) * pageSize;\n      var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1); // create an array of pages to ng-repeat in the pager control\n\n      var pages = range(startPage, endPage + 1); // return object with all pager properties required by the view\n\n      return {\n        totalItems: totalItems,\n        currentPage: currentPage,\n        pageSize: pageSize,\n        totalPages: totalPages,\n        startPage: startPage,\n        endPage: endPage,\n        startIndex: startIndex,\n        endIndex: endIndex,\n        pages: pages\n      };\n    };\n\n    _this.state = {\n      pager: {},\n      size: props.pageSize\n    };\n    return _this;\n  }\n\n  _createClass(PaginationSmallComponent, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this$props2 = this.props,\n          items = _this$props2.items,\n          initialPage = _this$props2.initialPage; // set page if items array isn't empty\n\n      if (items && items.length) {\n        this.setPage(initialPage);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props3 = this.props,\n          items = _this$props3.items,\n          initialPage = _this$props3.initialPage; // reset page if items array has changed\n\n      if (items !== prevProps.items) {\n        this.setPage(initialPage);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var pager = this.pager;\n      return React.createElement(\"div\", {\n        className: \"pagination__wrap pagination__wrap--small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, !pager.pages || pager.pages.length <= 1 ? '' : React.createElement(Pagination, {\n        className: \"pagination\",\n        dir: \"ltr\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(PaginationItem, {\n        className: \"pagination__item\",\n        disabled: pager.currentPage === 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(PaginationLink, {\n        className: \"pagination__link pagination__link--arrow\",\n        type: \"button\",\n        onClick: function onClick() {\n          return _this2.setPage(pager.currentPage - 1);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(ChevronLeftIcon, {\n        className: \"pagination__link-icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }))), React.createElement(PaginationItem, {\n        className: \"pagination__item\",\n        disabled: pager.currentPage === pager.totalPages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(PaginationLink, {\n        className: \"pagination__link pagination__link--arrow\",\n        type: \"button\",\n        onClick: function onClick() {\n          return _this2.setPage(pager.currentPage + 1);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(ChevronRightIcon, {\n        className: \"pagination__link-icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return PaginationSmallComponent;\n}(PureComponent);\n/* eslint-enable */\n// todo: rework it\n\n\nPaginationSmallComponent.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.any).isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  initialPage: PropTypes.number.isRequired,\n  pageSize: PropTypes.number\n};\nPaginationSmallComponent.defaultProps = {\n  pageSize: 1\n};\nexport { PaginationSmallComponent as default };","map":{"version":3,"sources":["/Users/monica/Desktop/template/src/shared/components/pagination/PaginationSmall.jsx"],"names":["React","PureComponent","Pagination","PaginationItem","PaginationLink","PropTypes","range","ChevronRightIcon","ChevronLeftIcon","PaginationSmallComponent","props","setPage","page","items","onChangePage","state","pager","size","totalPages","getPager","length","pageOfItems","slice","startIndex","endIndex","setState","totalItems","curPage","pSize","currentPage","pageSize","Math","ceil","startPage","endPage","min","pages","initialPage","prevProps","propTypes","arrayOf","any","isRequired","func","number","defaultProps"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport { Pagination, PaginationItem, PaginationLink } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport range from 'lodash.range';\nimport ChevronRightIcon from 'mdi-react/ChevronRightIcon';\nimport ChevronLeftIcon from 'mdi-react/ChevronLeftIcon';\n\nexport default class PaginationSmallComponent extends PureComponent {\n  static propTypes = {\n    items: PropTypes.arrayOf(PropTypes.any).isRequired,\n    onChangePage: PropTypes.func.isRequired,\n    initialPage: PropTypes.number.isRequired,\n    pageSize: PropTypes.number,\n  };\n\n  static defaultProps = {\n    pageSize: 1,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = { pager: {}, size: props.pageSize };\n  }\n\n  componentWillMount() {\n    const { items, initialPage } = this.props;\n    // set page if items array isn't empty\n    if (items && items.length) {\n      this.setPage(initialPage);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { items, initialPage } = this.props;\n    // reset page if items array has changed\n    if (items !== prevProps.items) {\n      this.setPage(initialPage);\n    }\n  }\n\n  setPage = (page) => {\n    const { items, onChangePage } = this.props;\n    const { pager, size } = this.state;\n\n    if (page < 1 || page > pager.totalPages) {\n      return;\n    }\n\n    // get new pager object for specified page\n    this.pager = this.getPager(items.length, page, size);\n\n    // get new page of items from items array\n    const pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1);\n\n    // update state\n    this.setState({ pager: this.pager });\n\n    // call change page function in parent component\n    onChangePage(pageOfItems);\n  };\n\n  getPager = (totalItems, curPage, pSize) => {\n    // default to first page\n    const currentPage = curPage || 1;\n\n    // default page size is 10\n    const pageSize = pSize || 10;\n\n    // calculate total pages\n    const totalPages = Math.ceil(totalItems / pageSize);\n\n    let startPage;\n    let endPage;\n    if (totalPages <= 10) {\n      // less than 10 total pages so show all\n      startPage = 1;\n      endPage = totalPages;\n    } else if (currentPage <= 6) {\n      // more than 10 total pages so calculate start and end pages\n      startPage = 1;\n      endPage = 10;\n    } else if (currentPage + 4 >= totalPages) {\n      startPage = totalPages - 9;\n      endPage = totalPages;\n    } else {\n      startPage = currentPage - 5;\n      endPage = currentPage + 4;\n    }\n\n    // calculate start and end item indexes\n    const startIndex = (currentPage - 1) * pageSize;\n    const endIndex = Math.min((startIndex + pageSize) - 1, totalItems - 1);\n\n    // create an array of pages to ng-repeat in the pager control\n    const pages = range(startPage, endPage + 1);\n\n    // return object with all pager properties required by the view\n    return {\n      totalItems,\n      currentPage,\n      pageSize,\n      totalPages,\n      startPage,\n      endPage,\n      startIndex,\n      endIndex,\n      pages,\n    };\n  };\n\n  render() {\n    const { pager } = this;\n\n    return (\n      <div className=\"pagination__wrap pagination__wrap--small\">\n        {(!pager.pages || pager.pages.length <= 1) ? ''\n          : (\n            <Pagination className=\"pagination\" dir=\"ltr\">\n              <PaginationItem className=\"pagination__item\" disabled={pager.currentPage === 1}>\n                <PaginationLink\n                  className=\"pagination__link pagination__link--arrow\"\n                  type=\"button\"\n                  onClick={() => this.setPage(pager.currentPage - 1)}\n                >\n                  <ChevronLeftIcon className=\"pagination__link-icon\" />\n                </PaginationLink>\n              </PaginationItem>\n              <PaginationItem className=\"pagination__item\" disabled={pager.currentPage === pager.totalPages}>\n                <PaginationLink\n                  className=\"pagination__link pagination__link--arrow\"\n                  type=\"button\"\n                  onClick={() => this.setPage(pager.currentPage + 1)}\n                >\n                  <ChevronRightIcon className=\"pagination__link-icon\" />\n                </PaginationLink>\n              </PaginationItem>\n            </Pagination>\n          )\n        }\n      </div>\n    );\n  }\n}\n\n/* eslint-enable */\n\n// todo: rework it\n"]},"metadata":{},"sourceType":"module"}