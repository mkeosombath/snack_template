{"ast":null,"code":"import _objectSpread from \"/Users/monica/Desktop/snack-training/template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/monica/Desktop/snack-training/template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/monica/Desktop/snack-training/template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/monica/Desktop/snack-training/template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/monica/Desktop/snack-training/template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/monica/Desktop/snack-training/template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/monica/Desktop/snack-training/template/src/containers/Charts/ChartJs/components/RandomAnimatedBars.jsx\";\n\n/* eslint-disable no-underscore-dangle,react/no-did-mount-set-state */\nimport React, { PureComponent } from 'react';\nimport { Card, CardBody, Col } from 'reactstrap';\nimport { Bar } from 'react-chartjs-2';\nimport { withTranslation } from 'react-i18next';\nimport PropTypes from 'prop-types';\nvar initialState = {\n  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n  datasets: [{\n    label: 'My First dataset',\n    backgroundColor: '#FF6384',\n    borderColor: '#FF6384',\n    borderWidth: 1,\n    hoverBackgroundColor: '#FF6384',\n    hoverBorderColor: '#FF6384',\n    data: [65, 59, 80, 81, 56, 55, 45]\n  }]\n};\nvar options = {\n  legend: {\n    position: 'bottom'\n  },\n  scales: {\n    xAxes: [{\n      gridLines: {\n        color: 'rgb(204, 204, 204)',\n        borderDash: [3, 3]\n      },\n      ticks: {\n        fontColor: 'rgb(204, 204, 204)'\n      }\n    }],\n    yAxes: [{\n      gridLines: {\n        color: 'rgb(204, 204, 204)',\n        borderDash: [3, 3]\n      },\n      ticks: {\n        fontColor: 'rgb(204, 204, 204)'\n      }\n    }]\n  }\n};\n\nvar RandomAnimatedBars =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(RandomAnimatedBars, _PureComponent);\n\n  function RandomAnimatedBars() {\n    var _this2;\n\n    _classCallCheck(this, RandomAnimatedBars);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(RandomAnimatedBars).call(this));\n    _this2.state = {\n      data: initialState,\n      intervalId: null\n    };\n    return _this2;\n  }\n\n  _createClass(RandomAnimatedBars, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      var intervalId = setInterval(function () {\n        var oldDataSet = _this.state.data.datasets[0];\n        var newData = [];\n\n        for (var x = 0; x < _this.state.data.labels.length; x += 1) {\n          newData.push(Math.floor(Math.random() * 100));\n        }\n\n        var newDataSet = _objectSpread({}, oldDataSet);\n\n        newDataSet.data = newData;\n\n        var newState = _objectSpread({}, initialState, {\n          data: {\n            datasets: [newDataSet],\n            labels: _this.state.data.labels\n          }\n        });\n\n        _this.setState(newState);\n      }, 4000);\n      this.setState({\n        intervalId: intervalId\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var intervalId = this.state.intervalId;\n      clearInterval(intervalId);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var t = this.props.t;\n      var data = this.state.data;\n      return React.createElement(Col, {\n        md: 12,\n        lg: 12,\n        xl: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card__title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        className: \"bold-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, t('charts.react_chartjs.random_animated_bars'))), React.createElement(Bar, {\n        data: data,\n        options: options,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return RandomAnimatedBars;\n}(PureComponent);\n\nRandomAnimatedBars.propTypes = {\n  t: PropTypes.func.isRequired\n};\nexport default withTranslation('common')(RandomAnimatedBars);","map":{"version":3,"sources":["/Users/monica/Desktop/snack-training/template/src/containers/Charts/ChartJs/components/RandomAnimatedBars.jsx"],"names":["React","PureComponent","Card","CardBody","Col","Bar","withTranslation","PropTypes","initialState","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","data","options","legend","position","scales","xAxes","gridLines","color","borderDash","ticks","fontColor","yAxes","RandomAnimatedBars","state","intervalId","_this","setInterval","oldDataSet","newData","x","length","push","Math","floor","random","newDataSet","newState","setState","clearInterval","t","props","propTypes","func","isRequired"],"mappings":";;;;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,GAAzB,QAAoC,YAApC;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,UAAZ,EAAwB,OAAxB,EAAiC,OAAjC,EAA0C,KAA1C,EAAiD,MAAjD,EAAyD,MAAzD,CADW;AAEnBC,EAAAA,QAAQ,EAAE,CACR;AACEC,IAAAA,KAAK,EAAE,kBADT;AAEEC,IAAAA,eAAe,EAAE,SAFnB;AAGEC,IAAAA,WAAW,EAAE,SAHf;AAIEC,IAAAA,WAAW,EAAE,CAJf;AAKEC,IAAAA,oBAAoB,EAAE,SALxB;AAMEC,IAAAA,gBAAgB,EAAE,SANpB;AAOEC,IAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB;AAPR,GADQ;AAFS,CAArB;AAeA,IAAMC,OAAO,GAAG;AACdC,EAAAA,MAAM,EAAE;AACNC,IAAAA,QAAQ,EAAE;AADJ,GADM;AAIdC,EAAAA,MAAM,EAAE;AACNC,IAAAA,KAAK,EAAE,CACL;AACEC,MAAAA,SAAS,EAAE;AACTC,QAAAA,KAAK,EAAE,oBADE;AAETC,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ;AAFH,OADb;AAKEC,MAAAA,KAAK,EAAE;AACLC,QAAAA,SAAS,EAAE;AADN;AALT,KADK,CADD;AAYNC,IAAAA,KAAK,EAAE,CACL;AACEL,MAAAA,SAAS,EAAE;AACTC,QAAAA,KAAK,EAAE,oBADE;AAETC,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ;AAFH,OADb;AAKEC,MAAAA,KAAK,EAAE;AACLC,QAAAA,SAAS,EAAE;AADN;AALT,KADK;AAZD;AAJM,CAAhB;;IA8BME,kB;;;;;AAKJ,gCAAc;AAAA;;AAAA;;AACZ;AACA,WAAKC,KAAL,GAAa;AACXb,MAAAA,IAAI,EAAET,YADK;AAEXuB,MAAAA,UAAU,EAAE;AAFD,KAAb;AAFY;AAMb;;;;wCAEmB;AAClB,UAAMC,KAAK,GAAG,IAAd;;AAEA,UAAMD,UAAU,GAAGE,WAAW,CAAC,YAAM;AACnC,YAAMC,UAAU,GAAGF,KAAK,CAACF,KAAN,CAAYb,IAAZ,CAAiBP,QAAjB,CAA0B,CAA1B,CAAnB;AACA,YAAMyB,OAAO,GAAG,EAAhB;;AAEA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACF,KAAN,CAAYb,IAAZ,CAAiBR,MAAjB,CAAwB4B,MAA5C,EAAoDD,CAAC,IAAI,CAAzD,EAA4D;AAC1DD,UAAAA,OAAO,CAACG,IAAR,CAAaC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAb;AACD;;AAED,YAAMC,UAAU,qBACXR,UADW,CAAhB;;AAIAQ,QAAAA,UAAU,CAACzB,IAAX,GAAkBkB,OAAlB;;AAEA,YAAMQ,QAAQ,qBACTnC,YADS;AAEZS,UAAAA,IAAI,EAAE;AACJP,YAAAA,QAAQ,EAAE,CAACgC,UAAD,CADN;AAEJjC,YAAAA,MAAM,EAAEuB,KAAK,CAACF,KAAN,CAAYb,IAAZ,CAAiBR;AAFrB;AAFM,UAAd;;AAQAuB,QAAAA,KAAK,CAACY,QAAN,CAAeD,QAAf;AACD,OAvB6B,EAuB3B,IAvB2B,CAA9B;AAyBA,WAAKC,QAAL,CAAc;AAAEb,QAAAA,UAAU,EAAVA;AAAF,OAAd;AACD;;;2CAEsB;AAAA,UACbA,UADa,GACE,KAAKD,KADP,CACbC,UADa;AAErBc,MAAAA,aAAa,CAACd,UAAD,CAAb;AACD;;;6BAEQ;AAAA,UACCe,CADD,GACO,KAAKC,KADZ,CACCD,CADD;AAAA,UAEC7B,IAFD,GAEU,KAAKa,KAFf,CAECb,IAFD;AAIP,aACE,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,EAAT;AAAa,QAAA,EAAE,EAAE,EAAjB;AAAqB,QAAA,EAAE,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2B6B,CAAC,CAAC,2CAAD,CAA5B,CADF,CADF,EAIE,oBAAC,GAAD;AAAK,QAAA,IAAI,EAAE7B,IAAX;AAAiB,QAAA,OAAO,EAAEC,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,CADF,CADF,CADF;AAYD;;;;EAjE8BjB,a;;AAA3B4B,kB,CACGmB,S,GAAY;AACjBF,EAAAA,CAAC,EAAEvC,SAAS,CAAC0C,IAAV,CAAeC;AADD,C;AAmErB,eAAe5C,eAAe,CAAC,QAAD,CAAf,CAA0BuB,kBAA1B,CAAf","sourcesContent":["/* eslint-disable no-underscore-dangle,react/no-did-mount-set-state */\nimport React, { PureComponent } from 'react';\nimport { Card, CardBody, Col } from 'reactstrap';\nimport { Bar } from 'react-chartjs-2';\nimport { withTranslation } from 'react-i18next';\nimport PropTypes from 'prop-types';\n\nconst initialState = {\n  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n  datasets: [\n    {\n      label: 'My First dataset',\n      backgroundColor: '#FF6384',\n      borderColor: '#FF6384',\n      borderWidth: 1,\n      hoverBackgroundColor: '#FF6384',\n      hoverBorderColor: '#FF6384',\n      data: [65, 59, 80, 81, 56, 55, 45],\n    },\n  ],\n};\n\nconst options = {\n  legend: {\n    position: 'bottom',\n  },\n  scales: {\n    xAxes: [\n      {\n        gridLines: {\n          color: 'rgb(204, 204, 204)',\n          borderDash: [3, 3],\n        },\n        ticks: {\n          fontColor: 'rgb(204, 204, 204)',\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          color: 'rgb(204, 204, 204)',\n          borderDash: [3, 3],\n        },\n        ticks: {\n          fontColor: 'rgb(204, 204, 204)',\n        },\n      },\n    ],\n  },\n};\n\nclass RandomAnimatedBars extends PureComponent {\n  static propTypes = {\n    t: PropTypes.func.isRequired,\n  };\n\n  constructor() {\n    super();\n    this.state = {\n      data: initialState,\n      intervalId: null,\n    };\n  }\n\n  componentDidMount() {\n    const _this = this;\n\n    const intervalId = setInterval(() => {\n      const oldDataSet = _this.state.data.datasets[0];\n      const newData = [];\n\n      for (let x = 0; x < _this.state.data.labels.length; x += 1) {\n        newData.push(Math.floor(Math.random() * 100));\n      }\n\n      const newDataSet = {\n        ...oldDataSet,\n      };\n\n      newDataSet.data = newData;\n\n      const newState = {\n        ...initialState,\n        data: {\n          datasets: [newDataSet],\n          labels: _this.state.data.labels,\n        },\n      };\n\n      _this.setState(newState);\n    }, 4000);\n\n    this.setState({ intervalId });\n  }\n\n  componentWillUnmount() {\n    const { intervalId } = this.state;\n    clearInterval(intervalId);\n  }\n\n  render() {\n    const { t } = this.props;\n    const { data } = this.state;\n\n    return (\n      <Col md={12} lg={12} xl={6}>\n        <Card>\n          <CardBody>\n            <div className=\"card__title\">\n              <h5 className=\"bold-text\">{t('charts.react_chartjs.random_animated_bars')}</h5>\n            </div>\n            <Bar data={data} options={options} />\n          </CardBody>\n        </Card>\n      </Col>\n    );\n  }\n}\n\nexport default withTranslation('common')(RandomAnimatedBars);\n"]},"metadata":{},"sourceType":"module"}