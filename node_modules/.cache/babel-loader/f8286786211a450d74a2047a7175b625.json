{"ast":null,"code":"import _classCallCheck from \"/Users/monica/Desktop/snack-training/template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/monica/Desktop/snack-training/template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/monica/Desktop/snack-training/template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/monica/Desktop/snack-training/template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/monica/Desktop/snack-training/template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/monica/Desktop/snack-training/template/src/containers/Charts/ChartJs/components/DynamiclyRefreshedDoughnut.jsx\";\nimport React, { PureComponent } from 'react';\nimport { Card, CardBody, Col } from 'reactstrap';\nimport { Doughnut } from 'react-chartjs-2';\nimport { withTranslation } from 'react-i18next';\nimport PropTypes from 'prop-types';\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nvar getState = function getState() {\n  return {\n    labels: ['Red', 'Blue', 'Yellow'],\n    datasets: [{\n      data: [getRandomInt(50, 200), getRandomInt(100, 150), getRandomInt(150, 250)],\n      backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56'],\n      hoverBackgroundColor: ['#FF6384', '#36A2EB', '#FFCE56'],\n      borderColor: 'rgba(255,255,255,0.54)'\n    }]\n  };\n};\n\nvar DynamiclyRefreshedDoughnut =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(DynamiclyRefreshedDoughnut, _PureComponent);\n\n  function DynamiclyRefreshedDoughnut(props) {\n    var _this;\n\n    _classCallCheck(this, DynamiclyRefreshedDoughnut);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DynamiclyRefreshedDoughnut).call(this, props));\n    _this.state = {\n      data: getState(),\n      intervalId: null\n    };\n    return _this;\n  }\n\n  _createClass(DynamiclyRefreshedDoughnut, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      var intervalId = setInterval(function () {\n        _this2.setState({\n          data: getState()\n        });\n      }, 4000);\n      this.setState({\n        intervalId: intervalId\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var intervalId = this.state.intervalId;\n      clearInterval(intervalId);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var t = this.props.t;\n      var data = this.state.data;\n      return React.createElement(Col, {\n        md: 12,\n        lg: 12,\n        xl: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card__title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        className: \"bold-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, t('charts.react_chartjs.dynamicly_refreshed_doughnut'))), React.createElement(Doughnut, {\n        data: data,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return DynamiclyRefreshedDoughnut;\n}(PureComponent);\n\nDynamiclyRefreshedDoughnut.propTypes = {\n  t: PropTypes.func.isRequired\n};\nexport default withTranslation('common')(DynamiclyRefreshedDoughnut);","map":{"version":3,"sources":["/Users/monica/Desktop/snack-training/template/src/containers/Charts/ChartJs/components/DynamiclyRefreshedDoughnut.jsx"],"names":["React","PureComponent","Card","CardBody","Col","Doughnut","withTranslation","PropTypes","getRandomInt","min","max","Math","floor","random","getState","labels","datasets","data","backgroundColor","hoverBackgroundColor","borderColor","DynamiclyRefreshedDoughnut","props","state","intervalId","setInterval","setState","clearInterval","t","propTypes","func","isRequired"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,GAAzB,QAAoC,YAApC;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,SAASC,YAAT,CAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;AAC9B,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAkBH,GAAG,GAAGD,GAAP,GAAc,CAA/B,CAAX,IAAgDA,GAAvD;AACD;;AAED,IAAMK,QAAQ,GAAG,SAAXA,QAAW;AAAA,SAAO;AACtBC,IAAAA,MAAM,EAAE,CACN,KADM,EAEN,MAFM,EAGN,QAHM,CADc;AAMtBC,IAAAA,QAAQ,EAAE,CAAC;AACTC,MAAAA,IAAI,EAAE,CAACT,YAAY,CAAC,EAAD,EAAK,GAAL,CAAb,EAAwBA,YAAY,CAAC,GAAD,EAAM,GAAN,CAApC,EAAgDA,YAAY,CAAC,GAAD,EAAM,GAAN,CAA5D,CADG;AAETU,MAAAA,eAAe,EAAE,CACf,SADe,EAEf,SAFe,EAGf,SAHe,CAFR;AAOTC,MAAAA,oBAAoB,EAAE,CACpB,SADoB,EAEpB,SAFoB,EAGpB,SAHoB,CAPb;AAYTC,MAAAA,WAAW,EAAE;AAZJ,KAAD;AANY,GAAP;AAAA,CAAjB;;IAsBMC,0B;;;;;AAKJ,sCAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,oGAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXN,MAAAA,IAAI,EAAEH,QAAQ,EADH;AAEXU,MAAAA,UAAU,EAAE;AAFD,KAAb;AAFiB;AAMlB;;;;yCAEoB;AAAA;;AACnB,UAAMA,UAAU,GAAGC,WAAW,CAAC,YAAM;AACnC,QAAA,MAAI,CAACC,QAAL,CAAc;AAAET,UAAAA,IAAI,EAAEH,QAAQ;AAAhB,SAAd;AACD,OAF6B,EAE3B,IAF2B,CAA9B;AAIA,WAAKY,QAAL,CAAc;AAAEF,QAAAA,UAAU,EAAVA;AAAF,OAAd;AACD;;;2CAEsB;AAAA,UACbA,UADa,GACE,KAAKD,KADP,CACbC,UADa;AAErBG,MAAAA,aAAa,CAACH,UAAD,CAAb;AACD;;;6BAEQ;AAAA,UACCI,CADD,GACO,KAAKN,KADZ,CACCM,CADD;AAAA,UAECX,IAFD,GAEU,KAAKM,KAFf,CAECN,IAFD;AAIP,aACE,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,EAAT;AAAa,QAAA,EAAE,EAAE,EAAjB;AAAqB,QAAA,EAAE,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2BW,CAAC,CAAC,mDAAD,CAA5B,CADF,CADF,EAIE,oBAAC,QAAD;AAAU,QAAA,IAAI,EAAEX,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,CADF,CADF,CADF;AAYD;;;;EA1CsChB,a;;AAAnCoB,0B,CACGQ,S,GAAY;AACjBD,EAAAA,CAAC,EAAErB,SAAS,CAACuB,IAAV,CAAeC;AADD,C;AA4CrB,eAAezB,eAAe,CAAC,QAAD,CAAf,CAA0Be,0BAA1B,CAAf","sourcesContent":["import React, { PureComponent } from 'react';\nimport { Card, CardBody, Col } from 'reactstrap';\nimport { Doughnut } from 'react-chartjs-2';\nimport { withTranslation } from 'react-i18next';\nimport PropTypes from 'prop-types';\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * ((max - min) + 1)) + min;\n}\n\nconst getState = () => ({\n  labels: [\n    'Red',\n    'Blue',\n    'Yellow',\n  ],\n  datasets: [{\n    data: [getRandomInt(50, 200), getRandomInt(100, 150), getRandomInt(150, 250)],\n    backgroundColor: [\n      '#FF6384',\n      '#36A2EB',\n      '#FFCE56',\n    ],\n    hoverBackgroundColor: [\n      '#FF6384',\n      '#36A2EB',\n      '#FFCE56',\n    ],\n    borderColor: 'rgba(255,255,255,0.54)',\n  }],\n});\n\nclass DynamiclyRefreshedDoughnut extends PureComponent {\n  static propTypes = {\n    t: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: getState(),\n      intervalId: null,\n    };\n  }\n\n  componentWillMount() {\n    const intervalId = setInterval(() => {\n      this.setState({ data: getState() });\n    }, 4000);\n\n    this.setState({ intervalId });\n  }\n\n  componentWillUnmount() {\n    const { intervalId } = this.state;\n    clearInterval(intervalId);\n  }\n\n  render() {\n    const { t } = this.props;\n    const { data } = this.state;\n\n    return (\n      <Col md={12} lg={12} xl={6}>\n        <Card>\n          <CardBody>\n            <div className=\"card__title\">\n              <h5 className=\"bold-text\">{t('charts.react_chartjs.dynamicly_refreshed_doughnut')}</h5>\n            </div>\n            <Doughnut data={data} />\n          </CardBody>\n        </Card>\n      </Col>\n    );\n  }\n}\n\nexport default withTranslation('common')(DynamiclyRefreshedDoughnut);\n"]},"metadata":{},"sourceType":"module"}