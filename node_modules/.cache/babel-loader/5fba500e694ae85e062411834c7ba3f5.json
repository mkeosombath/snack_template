{"ast":null,"code":"import _classCallCheck from \"/Users/monica/Desktop/snack-training/template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/monica/Desktop/snack-training/template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/monica/Desktop/snack-training/template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/monica/Desktop/snack-training/template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/monica/Desktop/snack-training/template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/monica/Desktop/snack-training/template/src/containers/Chat/components/Chat.jsx\";\n\n/* eslint-disable react/no-array-index-key */\nimport React, { PureComponent } from 'react';\nimport Scrollbar from 'react-smooth-scrollbar';\nimport classNames from 'classnames';\nimport ChatContact from './ChatContact';\nimport ChatBubble from './ChatBubble';\nimport ChatSearch from './ChatSearch';\nimport ChatField from './ChatField';\nimport ChatTopbar from './ChatTopbar';\nimport { CurrentUserProps, ContactsProps } from '../../../shared/prop-types/ChatProps';\n\nvar Chat =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Chat, _PureComponent);\n\n  function Chat(props) {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chat).call(this, props));\n\n    _this.onOpenChat = function (contact, e) {\n      var contacts = _this.props.contacts;\n      e.preventDefault();\n      var dialog = contacts.find(function (c) {\n        return c.userName === contact;\n      }).messages;\n      var messages = dialog || null;\n\n      _this.setState({\n        currentChat: contact,\n        currentMessages: messages\n      });\n    };\n\n    _this.onOpenContacts = function () {\n      _this.setState(function (prevState) {\n        return {\n          openContacts: !prevState.openContacts\n        };\n      });\n    };\n\n    _this.state = {\n      currentMessages: props.contacts[0].messages,\n      currentChat: props.contacts[0].userName,\n      openContacts: false\n    };\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          openContacts = _this$state.openContacts,\n          currentChat = _this$state.currentChat,\n          currentMessages = _this$state.currentMessages;\n      var _this$props = this.props,\n          currentUser = _this$props.currentUser,\n          contacts = _this$props.contacts;\n      var chatClass = classNames({\n        chat: true,\n        'chat--open': openContacts\n      });\n      var contactsClass = classNames({\n        'chat__contact-list': true,\n        'chat__contact-list--open': openContacts\n      });\n      return React.createElement(\"div\", {\n        className: chatClass,\n        onClick: openContacts ? this.onOpenContacts : null,\n        role: \"presentation\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: contactsClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(ChatSearch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"chat__contacts\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(Scrollbar, {\n        className: \"scroll chat__contacts-scroll\",\n        alwaysShowTracks: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, contacts.map(function (c, i) {\n        return React.createElement(\"button\", {\n          key: i,\n          type: \"button\",\n          onClick: function onClick(e) {\n            return _this2.onOpenChat(c.userName, e);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, React.createElement(ChatContact, {\n          active: c.userName === currentChat,\n          contact: c,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }));\n      })))), currentChat === null ? React.createElement(\"div\", {\n        className: \"chat__dialog\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(ChatTopbar, {\n        onClick: this.onOpenContacts,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"chat__dialog-select-message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"Select a chat to start messaging\"))) : React.createElement(\"div\", {\n        className: \"chat__dialog\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(ChatTopbar, {\n        contact: contacts.find(function (c) {\n          return c.userName === currentChat;\n        }),\n        onClick: this.onOpenContacts,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }), React.createElement(Scrollbar, {\n        className: \"scroll chat__scroll\",\n        alwaysShowTracks: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"chat__dialog-messages-wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, currentMessages === null || currentMessages.length === 0 ? React.createElement(\"div\", {\n        className: \"chat__dialog-messages\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"chat__dialog-messages-empty\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"No messages\"))) : React.createElement(\"div\", {\n        className: \"chat__dialog-messages\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, currentMessages.map(function (m, i) {\n        return React.createElement(ChatBubble, {\n          key: i,\n          contact: m.userName === currentUser.userName ? currentUser : contacts.find(function (c) {\n            return c.userName === m.userName;\n          }),\n          message: m,\n          date: m,\n          active: m.userName === currentUser.userName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        });\n      })))), React.createElement(ChatField, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Chat;\n}(PureComponent);\n\nChat.propTypes = {\n  currentUser: CurrentUserProps.isRequired,\n  contacts: ContactsProps.isRequired\n};\nexport { Chat as default };","map":{"version":3,"sources":["/Users/monica/Desktop/snack-training/template/src/containers/Chat/components/Chat.jsx"],"names":["React","PureComponent","Scrollbar","classNames","ChatContact","ChatBubble","ChatSearch","ChatField","ChatTopbar","CurrentUserProps","ContactsProps","Chat","props","onOpenChat","contact","e","contacts","preventDefault","dialog","find","c","userName","messages","setState","currentChat","currentMessages","onOpenContacts","prevState","openContacts","state","currentUser","chatClass","chat","contactsClass","map","i","length","m","propTypes","isRequired"],"mappings":"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","sourcesContent":["/* eslint-disable react/no-array-index-key */\n\nimport React, { PureComponent } from 'react';\nimport Scrollbar from 'react-smooth-scrollbar';\nimport classNames from 'classnames';\nimport ChatContact from './ChatContact';\nimport ChatBubble from './ChatBubble';\nimport ChatSearch from './ChatSearch';\nimport ChatField from './ChatField';\nimport ChatTopbar from './ChatTopbar';\nimport { CurrentUserProps, ContactsProps } from '../../../shared/prop-types/ChatProps';\n\nexport default class Chat extends PureComponent {\n  static propTypes = {\n    currentUser: CurrentUserProps.isRequired,\n    contacts: ContactsProps.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentMessages: props.contacts[0].messages,\n      currentChat: props.contacts[0].userName,\n      openContacts: false,\n    };\n  }\n\n\n  onOpenChat = (contact, e) => {\n    const { contacts } = this.props;\n\n    e.preventDefault();\n    const dialog = contacts.find(c => c.userName === contact).messages;\n    const messages = dialog || null;\n    this.setState({\n      currentChat: contact,\n      currentMessages: messages,\n    });\n  };\n\n  onOpenContacts = () => {\n    this.setState(prevState => ({ openContacts: !prevState.openContacts }));\n  };\n\n  render() {\n    const { openContacts, currentChat, currentMessages } = this.state;\n\n    const { currentUser, contacts } = this.props;\n    const chatClass = classNames({\n      chat: true,\n      'chat--open': openContacts,\n    });\n\n    const contactsClass = classNames({\n      'chat__contact-list': true,\n      'chat__contact-list--open': openContacts,\n    });\n\n    return (\n      <div\n        className={chatClass}\n        onClick={openContacts ? this.onOpenContacts : null}\n        role=\"presentation\"\n      >\n        <div className={contactsClass}>\n          <ChatSearch />\n          <div className=\"chat__contacts\">\n            <Scrollbar className=\"scroll chat__contacts-scroll\" alwaysShowTracks>\n              {contacts.map((c, i) => (\n                <button key={i} type=\"button\" onClick={e => this.onOpenChat(c.userName, e)}>\n                  <ChatContact active={c.userName === currentChat} contact={c} />\n                </button>\n              ))}\n            </Scrollbar>\n          </div>\n        </div>\n        {currentChat === null\n          ? (\n            <div className=\"chat__dialog\">\n              <ChatTopbar onClick={this.onOpenContacts} />\n              <div className=\"chat__dialog-select-message\">\n                <p>Select a chat to start messaging</p>\n              </div>\n            </div>\n          )\n          : (\n            <div className=\"chat__dialog\">\n              <ChatTopbar\n                contact={contacts.find(c => c.userName === currentChat)}\n                onClick={this.onOpenContacts}\n              />\n              <Scrollbar className=\"scroll chat__scroll\" alwaysShowTracks>\n                <div className=\"chat__dialog-messages-wrap\">\n                  {currentMessages === null || currentMessages.length === 0\n                    ? (\n                      <div className=\"chat__dialog-messages\">\n                        <div className=\"chat__dialog-messages-empty\">\n                          <p>No messages</p>\n                        </div>\n                      </div>\n                    )\n                    : (\n                      <div className=\"chat__dialog-messages\">\n                        {currentMessages.map((m, i) => (\n                          <ChatBubble\n                            key={i}\n                            contact={m.userName === currentUser.userName ? currentUser\n                              : contacts.find(c => c.userName === m.userName)}\n                            message={m}\n                            date={m}\n                            active={m.userName === currentUser.userName}\n                          />\n                        ))}\n                      </div>\n                    )\n                }\n                </div>\n              </Scrollbar>\n              <ChatField />\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}