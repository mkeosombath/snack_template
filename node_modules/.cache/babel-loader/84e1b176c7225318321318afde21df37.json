{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.monthsInYear = monthsInYear;\nexports.firstVisibleDay = firstVisibleDay;\nexports.lastVisibleDay = lastVisibleDay;\nexports.visibleDays = visibleDays;\nexports.ceil = ceil;\nexports.range = range;\nexports.merge = merge;\nexports.eqTime = eqTime;\nexports.isJustDate = isJustDate;\nexports.duration = duration;\nexports.diff = diff;\nexports.total = total;\nexports.week = week;\nexports.today = today;\nexports.yesterday = yesterday;\nexports.tomorrow = tomorrow;\nexports.max = exports.min = exports.inRange = exports.lt = exports.lte = exports.gt = exports.gte = exports.eq = exports.add = exports.endOf = exports.startOf = exports.month = exports.hours = exports.minutes = exports.seconds = exports.milliseconds = void 0;\n\nvar dates = _interopRequireWildcard(require(\"date-arithmetic\"));\n\nexports.milliseconds = dates.milliseconds;\nexports.seconds = dates.seconds;\nexports.minutes = dates.minutes;\nexports.hours = dates.hours;\nexports.month = dates.month;\nexports.startOf = dates.startOf;\nexports.endOf = dates.endOf;\nexports.add = dates.add;\nexports.eq = dates.eq;\nexports.gte = dates.gte;\nexports.gt = dates.gt;\nexports.lte = dates.lte;\nexports.lt = dates.lt;\nexports.inRange = dates.inRange;\nexports.min = dates.min;\nexports.max = dates.max;\n/* eslint no-fallthrough: off */\n\nvar MILLI = {\n  seconds: 1000,\n  minutes: 1000 * 60,\n  hours: 1000 * 60 * 60,\n  day: 1000 * 60 * 60 * 24\n};\nvar MONTHS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n\nfunction monthsInYear(year) {\n  var date = new Date(year, 0, 1);\n  return MONTHS.map(function (i) {\n    return dates.month(date, i);\n  });\n}\n\nfunction firstVisibleDay(date, localizer) {\n  var firstOfMonth = dates.startOf(date, 'month');\n  return dates.startOf(firstOfMonth, 'week', localizer.startOfWeek());\n}\n\nfunction lastVisibleDay(date, localizer) {\n  var endOfMonth = dates.endOf(date, 'month');\n  return dates.endOf(endOfMonth, 'week', localizer.startOfWeek());\n}\n\nfunction visibleDays(date, localizer) {\n  var current = firstVisibleDay(date, localizer),\n      last = lastVisibleDay(date, localizer),\n      days = [];\n\n  while (dates.lte(current, last, 'day')) {\n    days.push(current);\n    current = dates.add(current, 1, 'day');\n  }\n\n  return days;\n}\n\nfunction ceil(date, unit) {\n  var floor = dates.startOf(date, unit);\n  return dates.eq(floor, date) ? floor : dates.add(floor, 1, unit);\n}\n\nfunction range(start, end, unit) {\n  if (unit === void 0) {\n    unit = 'day';\n  }\n\n  var current = start,\n      days = [];\n\n  while (dates.lte(current, end, unit)) {\n    days.push(current);\n    current = dates.add(current, 1, unit);\n  }\n\n  return days;\n}\n\nfunction merge(date, time) {\n  if (time == null && date == null) return null;\n  if (time == null) time = new Date();\n  if (date == null) date = new Date();\n  date = dates.startOf(date, 'day');\n  date = dates.hours(date, dates.hours(time));\n  date = dates.minutes(date, dates.minutes(time));\n  date = dates.seconds(date, dates.seconds(time));\n  return dates.milliseconds(date, dates.milliseconds(time));\n}\n\nfunction eqTime(dateA, dateB) {\n  return dates.hours(dateA) === dates.hours(dateB) && dates.minutes(dateA) === dates.minutes(dateB) && dates.seconds(dateA) === dates.seconds(dateB);\n}\n\nfunction isJustDate(date) {\n  return dates.hours(date) === 0 && dates.minutes(date) === 0 && dates.seconds(date) === 0 && dates.milliseconds(date) === 0;\n}\n\nfunction duration(start, end, unit, firstOfWeek) {\n  if (unit === 'day') unit = 'date';\n  return Math.abs(dates[unit](start, undefined, firstOfWeek) - dates[unit](end, undefined, firstOfWeek));\n}\n\nfunction diff(dateA, dateB, unit) {\n  if (!unit || unit === 'milliseconds') return Math.abs(+dateA - +dateB); // the .round() handles an edge case\n  // with DST where the total won't be exact\n  // since one day in the range may be shorter/longer by an hour\n\n  return Math.round(Math.abs(+dates.startOf(dateA, unit) / MILLI[unit] - +dates.startOf(dateB, unit) / MILLI[unit]));\n}\n\nfunction total(date, unit) {\n  var ms = date.getTime(),\n      div = 1;\n\n  switch (unit) {\n    case 'week':\n      div *= 7;\n\n    case 'day':\n      div *= 24;\n\n    case 'hours':\n      div *= 60;\n\n    case 'minutes':\n      div *= 60;\n\n    case 'seconds':\n      div *= 1000;\n  }\n\n  return ms / div;\n}\n\nfunction week(date) {\n  var d = new Date(date);\n  d.setHours(0, 0, 0);\n  d.setDate(d.getDate() + 4 - (d.getDay() || 7));\n  return Math.ceil(((d - new Date(d.getFullYear(), 0, 1)) / 8.64e7 + 1) / 7);\n}\n\nfunction today() {\n  return dates.startOf(new Date(), 'day');\n}\n\nfunction yesterday() {\n  return dates.add(dates.startOf(new Date(), 'day'), -1, 'day');\n}\n\nfunction tomorrow() {\n  return dates.add(dates.startOf(new Date(), 'day'), 1, 'day');\n}","map":null,"metadata":{},"sourceType":"script"}