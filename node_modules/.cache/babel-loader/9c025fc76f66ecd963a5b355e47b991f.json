{"ast":null,"code":"var React = require('react');\n\nvar clamp = require('./clamp.js');\n\nvar pick = require('object.pick');\n\nvar PropTypes = require('prop-types');\n\nvar ReactDOM = require('react-dom');\n/**\n * multuline text-overflow: ellipsis\n */\n\n\nfunction Dotdotdot() {\n  if (!(this instanceof Dotdotdot)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n\n  this.update = this.update.bind(this);\n\n  this.getContainerRef = function (container) {\n    this.container = container;\n  }.bind(this);\n}\n\nDotdotdot.prototype = Object.create(React.Component.prototype);\n\nDotdotdot.prototype.componentDidMount = function () {\n  window.addEventListener('resize', this.update, false); // NOTE: It's possible, not all fonts are loaded on window.load\n\n  window.addEventListener('load', this.update, false);\n  this.dotdotdot(ReactDOM.findDOMNode(this.container));\n};\n\nDotdotdot.prototype.componentWillUnmount = function () {\n  window.removeEventListener('resize', this.update, false);\n  window.removeEventListener('load', this.update, false);\n};\n\nDotdotdot.prototype.componentDidUpdate = function () {\n  this.dotdotdot(ReactDOM.findDOMNode(this.container));\n};\n\nDotdotdot.prototype.dotdotdot = function (container) {\n  if (!container) {\n    return;\n  }\n\n  if (this.props.clamp) {\n    if (container.length) {\n      throw new Error('Please provide exacly one child to dotdotdot');\n    }\n\n    clamp(container, pick(this.props, ['animate', 'clamp', 'splitOnChars', 'truncationChar', 'truncationHTML', 'useNativeClamp']));\n  }\n\n  ;\n};\n\nDotdotdot.prototype.update = function () {\n  this.forceUpdate();\n};\n\nDotdotdot.prototype.render = function () {\n  return React.createElement(this.props.tagName, {\n    ref: this.getContainerRef,\n    className: this.props.className\n  }, this.props.children);\n}; // Statics:\n\n\nDotdotdot.propTypes = {\n  children: PropTypes.node,\n  clamp: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool]).isRequired,\n  truncationChar: PropTypes.string,\n  useNativeClamp: PropTypes.bool,\n  className: PropTypes.string,\n  tagName: PropTypes.string\n};\nDotdotdot.defaultProps = {\n  truncationChar: \"\\u2026\",\n  useNativeClamp: false,\n  tagName: 'div'\n};\nmodule.exports = Dotdotdot;","map":null,"metadata":{},"sourceType":"script"}