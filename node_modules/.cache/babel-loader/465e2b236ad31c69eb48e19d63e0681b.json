{"ast":null,"code":"import _classCallCheck from \"/Users/monica/Desktop/snack-training/template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/monica/Desktop/snack-training/template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/monica/Desktop/snack-training/template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/monica/Desktop/snack-training/template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/monica/Desktop/snack-training/template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/monica/Desktop/snack-training/template/src/shared/components/table/EditableTable.jsx\";\n\n/* eslint-disable consistent-return */\nimport React, { PureComponent } from 'react';\nimport ReactDataGrid from 'react-data-grid';\nimport update from 'immutability-helper';\nimport PropTypes from 'prop-types';\n\nvar EditableTable =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(EditableTable, _PureComponent);\n\n  function EditableTable(props, context) {\n    var _this;\n\n    _classCallCheck(this, EditableTable);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EditableTable).call(this, props, context));\n\n    _this.handleGridRowsUpdated = function (_ref) {\n      var fromRow = _ref.fromRow,\n          toRow = _ref.toRow,\n          updated = _ref.updated;\n      var rows = _this.state.rows;\n      rows = rows.slice();\n\n      for (var i = fromRow; i <= toRow; i += 1) {\n        var rowToUpdate = rows[i];\n        rows[i] = update(rowToUpdate, {\n          $merge: updated\n        });\n      }\n\n      _this.setState({\n        rows: rows\n      });\n    };\n\n    _this.handleGridSort = function (sortColumn, sortDirection) {\n      var comparer = function comparer(a, b) {\n        if (sortDirection === 'ASC') {\n          return a[sortColumn] > b[sortColumn] ? 1 : -1;\n        }\n\n        if (sortDirection === 'DESC') {\n          return a[sortColumn] < b[sortColumn] ? 1 : -1;\n        }\n      };\n\n      var originalRows = _this.state.originalRows;\n      var sortRows = originalRows.slice(0);\n      var rows = sortDirection === 'NONE' ? originalRows.slice(0, 10) : sortRows.sort(comparer).slice(0, 10);\n\n      _this.setState({\n        rows: rows\n      });\n    };\n\n    _this.rowGetter = function (i) {\n      var rows = _this.state.rows;\n      return rows[i];\n    };\n\n    var _originalRows = props.rows;\n\n    var _rows = _originalRows.slice(0, 10);\n\n    _this.state = {\n      rows: _rows,\n      originalRows: _originalRows\n    };\n    return _this;\n  }\n\n  _createClass(EditableTable, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          heads = _this$props.heads,\n          rows = _this$props.rows;\n      return React.createElement(\"div\", {\n        className: \"table\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(ReactDataGrid, {\n        onGridSort: this.handleGridSort,\n        enableCellSelect: true,\n        columns: heads,\n        rowGetter: this.rowGetter,\n        rowsCount: rows.length,\n        onGridRowsUpdated: this.handleGridRowsUpdated,\n        rowHeight: 44,\n        minColumnWidth: 100,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return EditableTable;\n}(PureComponent);\n\nEditableTable.propTypes = {\n  heads: PropTypes.arrayOf(PropTypes.shape({\n    key: PropTypes.string,\n    name: PropTypes.string,\n    editable: PropTypes.bool,\n    sortable: PropTypes.bool\n  })).isRequired,\n  rows: PropTypes.arrayOf(PropTypes.shape()).isRequired\n};\nexport { EditableTable as default };","map":{"version":3,"sources":["/Users/monica/Desktop/snack-training/template/src/shared/components/table/EditableTable.jsx"],"names":["React","PureComponent","ReactDataGrid","update","PropTypes","EditableTable","props","context","handleGridRowsUpdated","fromRow","toRow","updated","rows","state","slice","i","rowToUpdate","$merge","setState","handleGridSort","sortColumn","sortDirection","comparer","a","b","originalRows","sortRows","sort","rowGetter","heads","length","propTypes","arrayOf","shape","key","string","name","editable","bool","sortable","isRequired"],"mappings":"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","sourcesContent":["/* eslint-disable consistent-return */\nimport React, { PureComponent } from 'react';\nimport ReactDataGrid from 'react-data-grid';\nimport update from 'immutability-helper';\nimport PropTypes from 'prop-types';\n\nexport default class EditableTable extends PureComponent {\n  static propTypes = {\n    heads: PropTypes.arrayOf(PropTypes.shape({\n      key: PropTypes.string,\n      name: PropTypes.string,\n      editable: PropTypes.bool,\n      sortable: PropTypes.bool,\n    })).isRequired,\n    rows: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    const originalRows = props.rows;\n    const rows = originalRows.slice(0, 10);\n    this.state = { rows, originalRows };\n  }\n\n  handleGridRowsUpdated = ({ fromRow, toRow, updated }) => {\n    let { rows } = this.state;\n    rows = rows.slice();\n\n    for (let i = fromRow; i <= toRow; i += 1) {\n      const rowToUpdate = rows[i];\n      rows[i] = update(rowToUpdate, { $merge: updated });\n    }\n\n    this.setState({ rows });\n  };\n\n  handleGridSort = (sortColumn, sortDirection) => {\n    const comparer = (a, b) => {\n      if (sortDirection === 'ASC') {\n        return (a[sortColumn] > b[sortColumn]) ? 1 : -1;\n      } if (sortDirection === 'DESC') {\n        return (a[sortColumn] < b[sortColumn]) ? 1 : -1;\n      }\n    };\n\n    const { originalRows } = this.state;\n    const sortRows = originalRows.slice(0);\n    const rows = sortDirection === 'NONE' ? originalRows.slice(0, 10) : sortRows.sort(comparer).slice(0, 10);\n\n    this.setState({ rows });\n  };\n\n  rowGetter = (i) => {\n    const { rows } = this.state;\n    return rows[i];\n  };\n\n  render() {\n    const { heads, rows } = this.props;\n    return (\n      <div className=\"table\">\n        <ReactDataGrid\n          onGridSort={this.handleGridSort}\n          enableCellSelect\n          columns={heads}\n          rowGetter={this.rowGetter}\n          rowsCount={rows.length}\n          onGridRowsUpdated={this.handleGridRowsUpdated}\n          rowHeight={44}\n          minColumnWidth={100}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}